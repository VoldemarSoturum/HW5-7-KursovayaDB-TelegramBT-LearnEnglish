import random
import logging
from datetime import datetime
from typing import Tuple, Optional, List, Dict, Union
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, Message, CallbackQuery
from database import db
from translator import translate_word, is_in_dictionary
import xml.etree.ElementTree as ET
import os

logger = logging.getLogger(__name__)

# –î–æ–ø—É—Å—Ç–∏–º—ã–µ –æ–ø–µ—á–∞—Ç–∫–∏
ALLOWED_TYPOS = {
    '–ø—Ä—Å—Ç–∏—Ç–µ': '–ø—Ä–æ—Å—Ç–∏—Ç–µ',
    '–∏–∑–≤–Ω–∏—Ç–µ': '–∏–∑–≤–∏–Ω–∏—Ç–µ',
    '—Å–æ—Ä–∏': 'sorry',
    '–≤–∞–¥–∞': '–≤–æ–¥–∞',
    '–≤–∞—Ç–µ—Ä': 'water',
    '–π–µ—Å': 'yes',
    '–Ω–æ—É': 'no',
    '—Ö–µ–ª–ª–æ': 'hello',
    '—Å–∞–Ω–∫—Å': 'thanks',
    '—Ç—Ö–∞–∫ —é': 'thank you'
}

async def check_db_connection():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    try:
        await db.pool.fetch("SELECT 1")
        return True
    except Exception as e:
        logger.error(f"Database connection error: {e}")
        return False

async def load_words_from_xml() -> List[Tuple[str, str]]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ª–æ–≤–∞ –∏–∑ XML-—Ñ–∞–π–ª–∞ dictionary.xml"""
    try:
        dir_path = os.path.dirname(os.path.realpath(__file__))
        xml_path = os.path.join(dir_path, 'dictionary.xml')
        
        if not os.path.exists(xml_path):
            logger.warning("XML dictionary file not found")
            return []
            
        tree = ET.parse(xml_path)
        root = tree.getroot()
        
        words = []
        for entry in root.findall('entry'):
            en_word = entry.find('en').text.strip().lower()
            ru_word = entry.find('ru').text.strip().lower()
            if en_word and ru_word:
                words.append((en_word, ru_word))
                
        return words
    except Exception as e:
        logger.error(f"Error loading XML dictionary: {e}")
        return []

async def start_learning_test(user_id: int, state: FSMContext) -> Tuple[Optional[str], Optional[str], Optional[InlineKeyboardMarkup]]:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤–æ–ø—Ä–æ—Å –¥–ª—è —Ç–µ—Å—Ç–∞"""
    try:
        data = await state.get_data()
        
        # –ï—Å–ª–∏ —Ç–µ—Å—Ç —Ç–æ–ª—å–∫–æ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è
        if not data.get('test_in_progress'):
            test_id = await db.create_test_session(user_id)
            if not test_id:
                logger.error("Failed to create test session")
                return None, None, None
            
            await state.update_data(
                test_id=test_id,
                test_in_progress=True,
                test_start_time=datetime.now(),
                questions_answered=0,
                correct_answers=0,
                incorrect_answers=0,
                test_questions=[]
            )
            data = await state.get_data()

        # –ü–æ–ª—É—á–∞–µ–º —Å–ª–æ–≤–∞ –¥–ª—è —Ç–µ—Å—Ç–∞
        user_words = await db.get_user_words(user_id) or []
        default_words = await db.get_default_words() or []
        xml_words = await load_words_from_xml() or []
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Å–ª–æ–≤–∞, –∏—Å–∫–ª—é—á–∞—è –¥—É–±–ª–∏–∫–∞—Ç—ã
        all_words = list({word[0]: word for word in user_words + default_words + xml_words}.values())

        if not all_words:
            logger.warning(f"No words available for user {user_id}")
            return None, None, None

        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —Å–ª–æ–≤–æ
        en_word, ru_word = random.choice(all_words)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–ª–æ–≤–∞
        word_type = 'user' if (en_word, ru_word) in user_words else \
                   'default' if (en_word, ru_word) in default_words else 'xml'

        # –í—ã–±–∏—Ä–∞–µ–º —Ç–∏–ø –≤–æ–ø—Ä–æ—Å–∞
        question_type = random.choice(['en_to_ru', 'ru_to_en'])
        
        if question_type == 'en_to_ru':
            question = f"–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ: {en_word}"
            correct_answer = ru_word
        else:
            question = f"–ö–∞–∫ –±—É–¥–µ—Ç '{ru_word}' –ø–æ-–∞–Ω–≥–ª–∏–π—Å–∫–∏?"
            correct_answer = en_word

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å–∞
        await state.update_data({
            'current_question': question,
            'test_correct_answer': correct_answer,
            'current_word': en_word,
            'word_type': word_type,
            'question_type': question_type,
            'original_ru_word': ru_word
        })

        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ—Å—Ç", callback_data="end_test")]
        ])

        return question, correct_answer, keyboard

    except Exception as e:
        logger.error(f"Error in start_learning_test: {e}", exc_info=True)
        return None, None, None

async def handle_test_response(user_id: int, user_answer: str, 
                             correct_answer: str, state: FSMContext) -> Tuple[bool, str, InlineKeyboardMarkup]:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        data = await state.get_data()
        test_id = data.get('test_id')
        if not test_id:
            raise ValueError("Test session ID not found")
            
        word_type = data.get('word_type', 'default')
        question_type = data.get('question_type', 'en_to_ru')
        current_word = data.get('current_word', '')
        original_ru_word = data.get('original_ru_word', '')
        
        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
        user_answer = user_answer.strip().lower()
        correct_answer_lower = correct_answer.lower()
        user_answer = ALLOWED_TYPOS.get(user_answer, user_answer)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∞
        is_correct, possible_translations = await _check_answer(
            user_answer, correct_answer_lower, 
            question_type, current_word, user_id
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        await _save_test_results(
            test_id, user_id, current_word, word_type,
            correct_answer, user_answer, is_correct, state
        )

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        feedback = _generate_feedback(
            is_correct, user_answer, correct_answer,
            question_type, possible_translations, original_ru_word
        )

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ—Å—Ç", callback_data="end_test")]
        ])

        return is_correct, feedback, keyboard
            
    except Exception as e:
        logger.error(f"Error in handle_test_response: {e}", exc_info=True)
        return False, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: '{correct_answer}'", None

async def _check_answer(user_answer: str, correct_answer: str, 
                       question_type: str, current_word: str, 
                       user_id: int) -> Tuple[bool, List[str]]:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞"""
    is_correct = False
    possible_translations = []

    if question_type == 'ru_to_en':
        is_correct = (user_answer == correct_answer)
        possible_translations = [correct_answer]
    else:
        possible_translations = await _get_possible_translations(current_word, user_id)
        is_correct = (user_answer in possible_translations)

    return is_correct, possible_translations

async def _get_possible_translations(word: str, user_id: int) -> List[str]:
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–µ—Ä–µ–≤–æ–¥–∞ —Å–ª–æ–≤–∞"""
    translations = set()

    # –ü–µ—Ä–µ–≤–æ–¥—ã –∏–∑ —Å–ª–æ–≤–∞—Ä—è
    if is_in_dictionary(word):
        translated = translate_word(word)
        if translated:
            translations.update(t.strip().lower() for t in translated.split(',') if t.strip())

    # –ü–µ—Ä–µ–≤–æ–¥—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    db_translations = await db.get_possible_translations(word, user_id)
    if db_translations:
        translations.update(t.lower() for t in db_translations if t.strip())

    return list(translations)

async def _save_test_results(test_id: int, user_id: int, word: str, 
                            word_type: str, correct_answer: str, 
                            user_answer: str, is_correct: bool, 
                            state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞"""
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏
    data = await state.get_data()
    questions_answered = data.get('questions_answered', 0) + 1
    correct_answers = data.get('correct_answers', 0) + (1 if is_correct else 0)
    incorrect_answers = data.get('incorrect_answers', 0) + (0 if is_correct else 1)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–æ–ø—Ä–æ—Å–∞
    await db.add_test_result(
        test_id,
        word,
        correct_answer,
        user_answer,
        is_correct
    )

    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await db.update_user_progress(user_id, word, word_type, is_correct)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–ø—Ä–æ—Å –≤ –∏—Å—Ç–æ—Ä–∏—é —Ç–µ—Å—Ç–∞
    test_questions = data.get('test_questions', [])
    test_questions.append({
        'question': data.get('current_question', ''),
        'correct_answer': correct_answer,
        'user_answer': user_answer,
        'is_correct': is_correct
    })

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(
        questions_answered=questions_answered,
        correct_answers=correct_answers,
        incorrect_answers=incorrect_answers,
        test_questions=test_questions
    )

def _generate_feedback(is_correct: bool, user_answer: str, 
                      correct_answer: str, question_type: str, 
                      possible_translations: List[str], 
                      original_ru_word: str) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if is_correct:
        return "‚úÖ –í–µ—Ä–Ω–æ! –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!"
    
    feedback = (
        f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –í–∞—à –æ—Ç–≤–µ—Ç: '{user_answer}'\n"
        f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: '{correct_answer}'"
    )
    
    if question_type == 'en_to_ru' and len(possible_translations) > 1:
        other_options = [t for t in possible_translations if t != correct_answer]
        if other_options:
            feedback += f"\n–î—Ä—É–≥–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã: {', '.join(other_options)}"
    elif question_type == 'ru_to_en':
        feedback += f"\n–ü–µ—Ä–µ–≤–æ–¥: '{original_ru_word}'"
    
    return feedback

async def end_test_and_show_results(user_id: int, state: FSMContext) -> Tuple[str, InlineKeyboardMarkup]:
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç —Ç–µ—Å—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"""
    try:
        data = await state.get_data()
        test_id = data.get('test_id')
        if not test_id:
            raise ValueError("Test session ID not found")

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ—Å—Ç–∞
        questions_answered = data.get('questions_answered', 0)
        correct_answers = data.get('correct_answers', 0)
        incorrect_answers = data.get('incorrect_answers', 0)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é —Ç–µ—Å—Ç–∞
        await db.update_test_session(
            test_id,
            questions_answered,
            correct_answers,
            incorrect_answers
        )

        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        test_results = await db.get_test_results(test_id)
        stats = await db.get_user_test_stats(user_id)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        result_message = _format_results_message(
            questions_answered, correct_answers, 
            incorrect_answers, test_results, stats
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤
        await db.update_leaderboard(user_id, correct_answers, incorrect_answers)

        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìã –ò—Å—Ç–æ—Ä–∏—è —Ç–µ—Å—Ç–æ–≤", callback_data="test_history")],
            [InlineKeyboardButton(text="üîÅ –ù–æ–≤—ã–π —Ç–µ—Å—Ç", callback_data="new_test")]
        ])

        await state.clear()
        return result_message, keyboard
        
    except Exception as e:
        logger.error(f"Error in end_test_and_show_results: {e}", exc_info=True)
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.", None

def _format_results_message(questions_answered: int, correct_answers: int,
                          incorrect_answers: int, test_results: List[Dict],
                          stats: Dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Ç–µ—Å—Ç–∞"""
    percentage = round((correct_answers / questions_answered) * 100) if questions_answered > 0 else 0
    
    message = (
        f"üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞</b>\n\n"
        f"üîπ –í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {questions_answered}\n"
        f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {correct_answers}\n"
        f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {incorrect_answers}\n"
        f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö: {percentage}%\n\n"
        f"<b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        f"üî• –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: {stats.get('avg_score', 0):.1f}\n"
        f"üèÜ –õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {stats.get('best_score', 0)}\n"
        f"üìã –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {stats.get('tests_count', 0)}\n\n"
    )
    
    if not test_results:
        message += "‚ÑπÔ∏è –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–æ–ø—Ä–æ—Å–∞—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞\n"
    else:
        message += "<b>–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤:</b>\n\n"
        for i, result in enumerate(test_results[-3:], 1):
            status = "‚úÖ" if result['is_correct'] else "‚ùå"
            message += (
                f"{i}. {status} –°–ª–æ–≤–æ: <b>{result['word']}</b>\n"
                f"   –í–∞—à –æ—Ç–≤–µ—Ç: {result['user_answer']}\n"
                f"   –ü—Ä–∞–≤–∏–ª—å–Ω–æ: {result['correct_answer']}\n\n"
            )
    
    return message

async def format_duration(start_time: datetime, end_time: datetime = None) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–µ—Å—Ç–∞"""
    if not end_time:
        return "–Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω"
    duration = end_time - start_time
    minutes = duration.total_seconds() // 60
    seconds = duration.total_seconds() % 60
    return f"{int(minutes)} –º–∏–Ω {int(seconds)} —Å–µ–∫"