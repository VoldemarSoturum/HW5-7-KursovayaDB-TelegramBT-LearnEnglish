import os
import asyncio
import logging
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import (
    InlineKeyboardButton, InlineKeyboardMarkup,
    ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
)
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.enums import ParseMode
from database import db
from translator import translate_word, is_in_dictionary
from learning_test import start_learning_test, handle_test_response, end_test_and_show_results
from datetime import datetime
from typing import Union

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot_token = os.getenv("BOT_TOKEN")
if not bot_token:
    raise ValueError("–ù–µ –∑–∞–¥–∞–Ω —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
bot = Bot(token=bot_token)
dp = Dispatcher()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞
class Form(StatesGroup):
    ADDING_WORD = State()
    REMOVING_WORD = State()
    TRANSLATING_WORD = State()
    ADDING_TRANSLATION = State()
    TEST = State()

async def create_words_keyboard(user_id: int, page: int = 0) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ª–æ–≤–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        default_words = await db.get_default_words()
        user_words = await db.get_user_words(user_id)
        all_words = default_words + user_words

        if not all_words:
            return InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ", callback_data="add_word")]
            ])

        words_per_page = 6
        start_idx = page * words_per_page
        end_idx = start_idx + words_per_page
        page_words = all_words[start_idx:end_idx]

        buttons = []
        for i in range(0, len(page_words), 2):
            row = []
            if i < len(page_words):
                en_word = page_words[i][0]
                row.append(InlineKeyboardButton(text=en_word, callback_data=f"word_{en_word}"))
            if i + 1 < len(page_words):
                en_word = page_words[i + 1][0]
                row.append(InlineKeyboardButton(text=en_word, callback_data=f"word_{en_word}"))
            buttons.append(row)

        nav_buttons = []
        if page > 0:
            nav_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"page_{page - 1}"))
        if end_idx < len(all_words):
            nav_buttons.append(InlineKeyboardButton(text="–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callback_data=f"page_{page + 1}"))
        if nav_buttons:
            buttons.append(nav_buttons)

        buttons.append([
            InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ", callback_data="add_word"),
            InlineKeyboardButton(text="üîô –£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ", callback_data="remove_word"),
            InlineKeyboardButton(text="üìò –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ —Å–ª–æ–≤–æ", callback_data="translate"),
            InlineKeyboardButton(text="üß† –¢–µ—Å—Ç", callback_data="start_test")
        ])

        return InlineKeyboardMarkup(inline_keyboard=buttons)
    except Exception as e:
        logger.error(f"Error creating keyboard: {e}")
        return InlineKeyboardMarkup(inline_keyboard=[])

@dp.message(Command("start"))
async def start_command(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    try:
        user = message.from_user
        await db.add_user(
            user.id,
            user.username or "",
            user.first_name or "",
            user.last_name or ""
        )

        welcome_message = (
            f"–ü—Ä–∏–≤–µ—Ç, {user.first_name} üëã\n"
            "–¢—ã –º–æ–∂–µ—à—å –∏–∑—É—á–∞—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ —Å–ª–æ–≤–∞, –¥–æ–±–∞–≤–ª—è—Ç—å —Å–≤–æ–∏ –∏ —É–¥–∞–ª—è—Ç—å –Ω–µ–Ω—É–∂–Ω—ã–µ.\n"
            "–¢–∞–∫–∂–µ —Ç–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–µ–Ω –±—ã—Å—Ç—Ä—ã–π –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤!\n\n"
            "–í—ã–±–∏—Ä–∞–π –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:"
        )
        keyboard = await create_words_keyboard(user.id)
        await message.answer(welcome_message, reply_markup=keyboard)
        await state.clear()
    except Exception as e:
        logger.error(f"Start command error: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.callback_query(F.data.startswith("word_"))
async def show_word_translation(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–µ—Ä–µ–≤–æ–¥ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞"""
    try:
        word = callback.data.split("_", 1)[1]
        translation = await db.get_word_translation(word) or await db.get_word_translation(word, 'user')
        if translation:
            await callback.message.edit_text(
                f"<b>{word}</b> - <i>{translation}</i>",
                parse_mode=ParseMode.HTML,
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="cancel")]
                ])
            )
        else:
            await callback.message.edit_text("–ü–µ—Ä–µ–≤–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except Exception as e:
        logger.error(f"Show word translation error: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–µ—Ä–µ–≤–æ–¥–∞.")

@dp.callback_query(F.data.startswith("page_"))
async def change_page(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü"""
    try:
        user_id = callback.from_user.id
        page = int(callback.data.split("_", 1)[1])
        keyboard = await create_words_keyboard(user_id, page)
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ–≤–æ:", reply_markup=keyboard)
    except (ValueError, IndexError) as e:
        logger.error(f"Invalid page number: {e}")
        await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
    except Exception as e:
        logger.error(f"Page change error: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã.")
    finally:
        await callback.answer()

@dp.callback_query(F.data == "add_word")
async def start_add_word(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞"""
    try:
        await callback.message.answer(
            "–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –∏ –ø–µ—Ä–µ–≤–æ–¥ —á–µ—Ä–µ–∑ —Ç–∏—Ä–µ. –ü—Ä–∏–º–µ—Ä: apple - —è–±–ª–æ–∫–æ",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥")]],
                resize_keyboard=True
            )
        )
        await state.set_state(Form.ADDING_WORD)
    except Exception as e:
        logger.error(f"Add word start error: {e}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")
    finally:
        await callback.answer()

@dp.message(Form.ADDING_WORD)
async def process_add_word(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞"""
    try:
        user_id = message.from_user.id
        text = message.text.strip()
        
        if text == "‚¨Ö –ù–∞–∑–∞–¥":
            keyboard = await create_words_keyboard(user_id)
            await message.answer("–û—Ç–º–µ–Ω–∞.", reply_markup=ReplyKeyboardRemove())
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
            await state.clear()
            return

        if '-' not in text:
            await message.answer("–§–æ—Ä–º–∞—Ç: —Å–ª–æ–≤–æ - –ø–µ—Ä–µ–≤–æ–¥", reply_markup=ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥")]], 
                resize_keyboard=True))
            return

        parts = text.split('-', 1)
        if len(parts) < 2:
            await message.answer("–§–æ—Ä–º–∞—Ç: —Å–ª–æ–≤–æ - –ø–µ—Ä–µ–≤–æ–¥")
            return
            
        en_word, ru_translation = [t.strip() for t in parts]
        
        if await db.add_user_word(user_id, en_word, ru_translation):
            keyboard = await create_words_keyboard(user_id)
            await message.answer(f"‚úÖ –°–ª–æ–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {en_word} - {ru_translation}", reply_markup=ReplyKeyboardRemove())
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
        else:
            keyboard = await create_words_keyboard(user_id)
            await message.answer(f"–°–ª–æ–≤–æ '{en_word}' —É–∂–µ –µ—Å—Ç—å.", reply_markup=ReplyKeyboardRemove())
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

        await state.clear()
    except Exception as e:
        logger.error(f"Add word error: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–ª–æ–≤–∞.")

@dp.callback_query(F.data == "remove_word")
async def start_remove_word(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —É–¥–∞–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞"""
    try:
        user_id = callback.from_user.id
        user_words = await db.get_user_words(user_id)
        
        if not user_words:
            await callback.message.edit_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤.", reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="cancel")]
            ]))
            return

        buttons = [[InlineKeyboardButton(text=f"{en} - {ru}", callback_data=f"remove_{en}")] for en, ru in user_words]
        buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="cancel")])
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ–≤–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons))
        await state.set_state(Form.REMOVING_WORD)
    except Exception as e:
        logger.error(f"Remove word start error: {e}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")
    finally:
        await callback.answer()

@dp.callback_query(F.data.startswith("remove_"), Form.REMOVING_WORD)
async def remove_word(callback: types.CallbackQuery, state: FSMContext):
    """–£–¥–∞–ª—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ"""
    try:
        user_id = callback.from_user.id
        word = callback.data.split("_", 1)[1]
        await db.remove_user_word(user_id, word)
        logger.info(f"User {user_id} —É–¥–∞–ª–∏–ª —Å–ª–æ–≤–æ: {word}")
        keyboard = await create_words_keyboard(user_id)
        await callback.message.edit_text(f"–°–ª–æ–≤–æ '{word}' —É–¥–∞–ª–µ–Ω–æ.", reply_markup=keyboard)
        await state.clear()
    except Exception as e:
        logger.error(f"Remove word error: {e}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–ª–æ–≤–∞.")
    finally:
        await callback.answer()

@dp.callback_query(F.data == "translate")
async def start_translate(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø–µ—Ä–µ–≤–æ–¥–∞ —Å–ª–æ–≤–∞"""
    try:
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞:")
        await state.set_state(Form.TRANSLATING_WORD)
    except Exception as e:
        logger.error(f"Translate start error: {e}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")
    finally:
        await callback.answer()

@dp.message(Form.TRANSLATING_WORD)
async def translate_input(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Å–ª–æ–≤–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞"""
    try:
        user_id = message.from_user.id
        word = message.text.strip()
        result = translate_word(word)
        
        if result:
            keyboard = await create_words_keyboard(user_id)
            await message.answer(f"üìò <b>{word}</b> ‚Äî <i>{result}</i>", parse_mode=ParseMode.HTML, reply_markup=ReplyKeyboardRemove())
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
            await state.clear()
        else:
            if is_in_dictionary(word):
                keyboard = await create_words_keyboard(user_id)
                await message.answer("–ü–µ—Ä–µ–≤–æ–¥ –µ—Å—Ç—å –≤ XML-—Å–ª–æ–≤–∞—Ä–µ, –Ω–æ –æ–Ω –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω. –£—Ç–æ—á–Ω–∏—Ç–µ.", reply_markup=ReplyKeyboardRemove())
                await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
                await state.clear()
                return
            
            await state.update_data(word_to_add=word)
            await message.answer(
                "–ü–µ—Ä–µ–≤–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥ –≤—Ä—É—á–Ω—É—é?\n–í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: —Å–ª–æ–≤–æ - –ø–µ—Ä–µ–≤–æ–¥",
                reply_markup=ReplyKeyboardMarkup(
                    keyboard=[[KeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥")]], 
                    resize_keyboard=True
                )
            )
            await state.set_state(Form.ADDING_TRANSLATION)
    except Exception as e:
        logger.error(f"Translate error: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ —Å–ª–æ–≤–∞.")

@dp.message(Form.ADDING_TRANSLATION)
async def add_translation_handler(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –≤—Ä—É—á–Ω—É—é"""
    try:
        user_id = message.from_user.id
        text = message.text.strip()
        
        if text == "‚¨Ö –ù–∞–∑–∞–¥":
            keyboard = await create_words_keyboard(user_id)
            await message.answer("–û—Ç–º–µ–Ω–∞.", reply_markup=ReplyKeyboardRemove())
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
            await state.clear()
            return

        if '-' not in text:
            await message.answer("–§–æ—Ä–º–∞—Ç: —Å–ª–æ–≤–æ - –ø–µ—Ä–µ–≤–æ–¥", reply_markup=ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥")]], 
                resize_keyboard=True))
            return

        parts = text.split('-', 1)
        if len(parts) < 2:
            await message.answer("–§–æ—Ä–º–∞—Ç: —Å–ª–æ–≤–æ - –ø–µ—Ä–µ–≤–æ–¥")
            return
            
        en_word, ru_translation = [t.strip() for t in parts]
        
        if await db.add_user_word(user_id, en_word, ru_translation):
            keyboard = await create_words_keyboard(user_id)
            await message.answer(f"‚úÖ –ü–µ—Ä–µ–≤–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω: {en_word} - {ru_translation}", reply_markup=ReplyKeyboardRemove())
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
        else:
            keyboard = await create_words_keyboard(user_id)
            await message.answer(f"–°–ª–æ–≤–æ '{en_word}' —É–∂–µ –µ—Å—Ç—å.", reply_markup=ReplyKeyboardRemove())
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

        await state.clear()
    except Exception as e:
        logger.error(f"Add translation error: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–µ—Ä–µ–≤–æ–¥–∞.")

@dp.callback_query(F.data == "start_test")
async def start_test_handler(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç —Ç–µ—Å—Ç –Ω–∞ –∑–Ω–∞–Ω–∏–µ —Å–ª–æ–≤"""
    try:
        user_id = callback.from_user.id
        question, correct_answer, keyboard = await start_learning_test(user_id, state)
        
        if question is None:
            await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∞.", show_alert=True)
            return
            
        await callback.message.edit_text(
            f"üß† –¢–µ—Å—Ç:\n{question}\n–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–ø—É—â–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ:",
            reply_markup=keyboard
        )
        await state.set_state(Form.TEST)
    except Exception as e:
        logger.error(f"Start test error: {e}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–∞.")
    finally:
        await callback.answer()

@dp.message(Form.TEST)
async def test_answer_handler(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–µ—Å—Ç–µ"""
    try:
        data = await state.get_data()
        if not data.get('test_in_progress'):
            await message.answer("–¢–µ—Å—Ç –Ω–µ –Ω–∞—á–∞—Ç –∏–ª–∏ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω")
            return

        user_response = message.text.strip()
        is_correct, feedback, keyboard = await handle_test_response(
            message.from_user.id, user_response, 
            data['test_correct_answer'], state
        )
        await message.answer(feedback, reply_markup=keyboard)

        # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
        question, correct_answer, keyboard = await start_learning_test(message.from_user.id, state)
        
        if question is None:
            # –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω
            results, keyboard = await end_test_and_show_results(message.from_user.id, state)
            await message.answer(results, parse_mode="HTML")
            menu_keyboard = await create_words_keyboard(message.from_user.id)
            await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=menu_keyboard)
            await state.clear()
            return

        await state.update_data({"test_correct_answer": correct_answer})
        await message.answer(
            f"üß† –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å:\n{question}\n–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–ø—É—â–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ:",
            reply_markup=keyboard
        )
    except Exception as e:
        logger.error(f"Test answer error: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞")
        await state.clear()

@dp.callback_query(F.data == "end_test")
async def end_test_handler(callback: types.CallbackQuery, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç —Ç–µ—Å—Ç –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"""
    try:
        results, keyboard = await end_test_and_show_results(callback.from_user.id, state)
        await callback.message.answer(results, parse_mode="HTML")
        menu_keyboard = await create_words_keyboard(callback.from_user.id)
        await callback.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=menu_keyboard)
        await state.clear()
    except Exception as e:
        logger.error(f"Error ending test: {e}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞")
    finally:
        await callback.answer()

@dp.callback_query(F.data == "cancel")
async def cancel_handler(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–º–µ–Ω—É –¥–µ–π—Å—Ç–≤–∏–π"""
    try:
        data = await state.get_data()
        user_id = callback.from_user.id
        
        if data.get('test_in_progress'):
            test_id = data.get('test_id')
            questions_answered = data.get('questions_answered', 0)
            
            if test_id and questions_answered > 0:
                await db.update_test_session(
                    test_id,
                    questions_answered,
                    data.get('correct_answers', 0),
                    data.get('incorrect_answers', 0)
                )
                message = "–¢–µ—Å—Ç –æ—Ç–º–µ–Ω–µ–Ω. –ü—Ä–æ–≥—Ä–µ—Å—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω."
            else:
                message = "–¢–µ—Å—Ç –æ—Ç–º–µ–Ω–µ–Ω."
            
            await callback.message.answer(message)
        
        keyboard = await create_words_keyboard(user_id)
        await callback.message.edit_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=keyboard)
        await state.clear()
        
    except Exception as e:
        logger.error(f"Cancel error: {e}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ.")
    finally:
        await callback.answer()

@dp.message(Command("history"))
async def show_history_command(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Ç–µ—Å—Ç–æ–≤"""
    await show_test_history(message)

@dp.callback_query(F.data == "test_history")
async def show_test_history_handler(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Ç–µ—Å—Ç–æ–≤"""
    await show_test_history(callback)

async def show_test_history(update: Union[types.Message, types.CallbackQuery]):
    """–û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Ç–µ—Å—Ç–æ–≤"""
    try:
        user_id = update.from_user.id
        tests = await db.get_user_test_history(user_id)
        
        if not tests:
            text = "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ —Ç–µ—Å—Ç–æ–≤."
            if isinstance(update, types.CallbackQuery):
                await update.message.answer(text)
            else:
                await update.answer(text)
            return
            
        history_message = "üìã –í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è —Ç–µ—Å—Ç–æ–≤:\n\n"
        
        # –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –ö–û–î –§–û–†–ú–ò–†–û–í–ê–ù–ò–Ø –ò–°–¢–û–†–ò–ò
        for i, test in enumerate(tests, 1):
            total = test['total_questions']
            correct = test['correct_answers']
            incorrect = test['incorrect_answers']
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ None
            if total is None or correct is None:
                continue
            
            percentage = round((correct / total) * 100) if total > 0 else 0
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
            start_time = test['start_time'].astimezone(db._moscow_tz)
            start_str = start_time.strftime('%d.%m.%Y %H:%M')
            
            duration = "–Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω"
            if test['end_time']:
                end_time = test['end_time'].astimezone(db._moscow_tz)
                duration_seconds = (end_time - start_time).total_seconds()
                minutes = int(duration_seconds // 60)
                seconds = int(duration_seconds % 60)
                duration = f"{minutes} –º–∏–Ω {seconds} —Å–µ–∫"
            
            history_message += (
                f"üîπ –¢–µ—Å—Ç #{i} –æ—Ç {start_str}\n"
                f"   ‚úÖ {correct}/{total} ({percentage}%)\n"
                f"   ‚ùå –û—à–∏–±–∫–∏: {incorrect}\n"
                f"   ‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration}\n\n"
            )
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="menu")],
            [InlineKeyboardButton(text="üìù –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–µ—Ç–∞–ª–∏", callback_data="last_test_details")]
        ])
        
        if isinstance(update, types.CallbackQuery):
            await update.message.edit_text(history_message, reply_markup=keyboard)
        else:
            await update.answer(history_message, reply_markup=keyboard)
            
    except Exception as e:
        logger.error(f"Error showing test history: {e}")
        error_msg = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Ç–µ—Å—Ç–æ–≤."
        if isinstance(update, types.CallbackQuery):
            await update.message.answer(error_msg)
        else:
            await update.answer(error_msg)

@dp.message(Command("last_test"))
async def show_last_test_command(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ç–µ—Å—Ç–∞"""
    await show_last_test_results(message)

async def show_last_test_results(update: Union[types.Message, types.CallbackQuery]):
    """–û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ç–µ—Å—Ç–∞"""
    try:
        user_id = update.from_user.id
        test_results = await db.get_user_last_test_results(user_id)
        
        if not test_results:
            text = "üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤."
            if isinstance(update, types.CallbackQuery):
                await update.message.answer(text)
            else:
                await update.answer(text)
            return
            
        response = "üìù <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ç–µ—Å—Ç–∞:</b>\n\n"
        for i, result in enumerate(test_results, 1):
            status = "‚úÖ" if result['is_correct'] else "‚ùå"
            response += (
                f"{i}. {status} –°–ª–æ–≤–æ: <b>{result['word']}</b>\n"
                f"   –í–∞—à –æ—Ç–≤–µ—Ç: {result['user_answer']}\n"
                f"   –ü—Ä–∞–≤–∏–ª—å–Ω–æ: {result['correct_answer']}\n\n"
            )
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="test_history")]
        ])
        
        if isinstance(update, types.CallbackQuery):
            await update.message.edit_text(response, parse_mode="HTML", reply_markup=keyboard)
        else:
            await update.answer(response, parse_mode="HTML", reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"Error showing last test results: {e}")
        error_msg = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤."
        if isinstance(update, types.CallbackQuery):
            await update.message.answer(error_msg)
        else:
            await update.answer(error_msg)

@dp.callback_query(F.data == "last_test_details")
async def show_last_test_details(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ç–µ—Å—Ç–∞"""
    await show_last_test_results(callback)

@dp.callback_query(F.data == "menu")
async def back_to_menu(callback: types.CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    try:
        keyboard = await create_words_keyboard(callback.from_user.id)
        await callback.message.edit_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=keyboard)
        await state.clear()
    except Exception as e:
        logger.error(f"Menu error: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é.")
    finally:
        await callback.answer()

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    try:
        await db.create_pool()
        await db.initialize_database()
        logger.info("Database pool initialized successfully")
        logger.info("Starting bot...")
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"Bot error: {e}")
    finally:
        if hasattr(db, 'pool') and db.pool is not None:
            await db.pool.close()
            logger.info("Database pool closed")
        await bot.session.close()
        logger.info("Bot session closed")

if __name__ == "__main__":
    asyncio.run(main())